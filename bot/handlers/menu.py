# -*- coding: utf-8 -*-
from aiogram import Dispatcher, types
from aiogram.utils.formatting import Text

from bot.keyboards.main_menu import get_main_menu_keyboard, get_inline_main_menu
from config.settings import DEFAULT_LANGUAGE
import logging

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
menu_texts = {
    'catalog': {
        'ru': 'üõí –ö–∞—Ç–∞–ª–æ–≥',
        'uk': 'üõí –ö–∞—Ç–∞–ª–æ–≥',
        'en': 'üõí Catalog'
    },
    'cart': {
        'ru': 'üõç –ö–æ—Ä–∑–∏–Ω–∞',
        'uk': 'üõç –ö–æ—à–∏–∫',
        'en': 'üõç Cart'
    },
    'my_bots': {
        'ru': 'ü§ñ –ú–æ–∏ –±–æ—Ç—ã',
        'uk': 'ü§ñ –ú–æ—ó –±–æ—Ç–∏',
        'en': 'ü§ñ My bots'
    },
    'support': {
        'ru': 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        'uk': 'üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞',
        'en': 'üÜò Support'
    },
    'settings': {
        'ru': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'uk': '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
        'en': '‚öôÔ∏è Settings'
    }
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def process_catalog_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥"""
    lang = message.from_user.language_code or DEFAULT_LANGUAGE
    await message.answer(
        get_localized_text('catalog_header', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–æ—Ç–æ–≤


async def process_cart_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ—Ä–∑–∏–Ω–∞"""
    lang = message.from_user.language_code or DEFAULT_LANGUAGE
    await message.answer(
        get_localized_text('cart_header', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã


async def process_my_bots_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –±–æ—Ç—ã"""
    lang = message.from_user.language_code or DEFAULT_LANGUAGE
    await message.answer(
        get_localized_text('my_bots_header', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤


async def process_support_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    lang = message.from_user.language_code or DEFAULT_LANGUAGE
    await message.answer(
        get_localized_text('support_header', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É


async def process_settings_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    lang = message.from_user.language_code or DEFAULT_LANGUAGE
    await message.answer(
        get_localized_text('settings_header', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def process_menu_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    lang = callback.from_user.language_code or DEFAULT_LANGUAGE
    action = callback.data.split(':')[1]

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if action == 'catalog':
        await callback.message.answer(
            get_localized_text('catalog_header', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
    elif action == 'cart':
        await callback.message.answer(
            get_localized_text('cart_header', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
    elif action == 'my_bots':
        await callback.message.answer(
            get_localized_text('my_bots_header', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
    elif action == 'support':
        await callback.message.answer(
            get_localized_text('support_header', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
    elif action == 'settings':
        await callback.message.answer(
            get_localized_text('settings_header', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )


def get_localized_text(key: str, lang: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É

    Args:
        key (str): –ö–ª—é—á —Ç–µ–∫—Å—Ç–∞
        lang (str): –ö–æ–¥ —è–∑—ã–∫–∞

    Returns:
        str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in ['ru', 'uk', 'en']:
        lang = 'ru'

    texts = {
        'catalog_header': {
            'ru': 'üõí <b>–ö–∞—Ç–∞–ª–æ–≥ –±–æ—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞:',
            'uk': 'üõí <b>–ö–∞—Ç–∞–ª–æ–≥ –±–æ—Ç—ñ–≤</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞:',
            'en': 'üõí <b>Bot Catalog</b>\n\nChoose a category or a specific bot:'
        },
        'cart_header': {
            'ru': 'üõç <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n\n–í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–æ—Ç—ã:',
            'uk': 'üõç <b>–ö–æ—à–∏–∫</b>\n\n–í–∞—à—ñ –≤–∏–±—Ä–∞–Ω—ñ –±–æ—Ç–∏:',
            'en': 'üõç <b>Cart</b>\n\nYour selected bots:'
        },
        'my_bots_header': {
            'ru': 'ü§ñ <b>–ú–æ–∏ –±–æ—Ç—ã</b>\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –±–æ—Ç–æ–≤:',
            'uk': 'ü§ñ <b>–ú–æ—ó –±–æ—Ç–∏</b>\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–¥–±–∞–Ω–∏—Ö –≤–∞–º–∏ –±–æ—Ç—ñ–≤:',
            'en': 'ü§ñ <b>My Bots</b>\n\nList of bots you have purchased:'
        },
        'support_header': {
            'ru': 'üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:',
            'uk': 'üÜò <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n\n–ó–∞–¥–∞–π—Ç–µ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:',
            'en': 'üÜò <b>Support</b>\n\nAsk your question or describe the problem:'
        },
        'settings_header': {
            'ru': '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:',
            'uk': '‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –∞–±–æ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:',
            'en': '‚öôÔ∏è <b>Settings</b>\n\nYou can change language or other settings:'
        }
    }

    return texts.get(key, {}).get(lang, f"Missing text: {key}")


def register_menu_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    for lang in ['ru', 'uk', 'en']:
        catalog_text = menu_texts['catalog'][lang]
        dp.message.register(
            process_catalog_command,
            lambda message, text=catalog_text: message.text == text
        )

        cart_text = menu_texts['cart'][lang]
        dp.message.register(
            process_cart_command,
            lambda message, text=cart_text: message.text == text
        )

        my_bots_text = menu_texts['my_bots'][lang]
        dp.message.register(
            process_my_bots_command,
            lambda message, text=my_bots_text: message.text == text
        )

        support_text = menu_texts['support'][lang]
        dp.message.register(
            process_support_command,
            lambda message, text=support_text: message.text == text
        )

        settings_text = menu_texts['settings'][lang]
        dp.message.register(
            process_settings_command,
            lambda message, text=settings_text: message.text == text
        )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ inline-–∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(
        process_menu_callback,
        lambda query: query.data.startswith("menu:")
    )