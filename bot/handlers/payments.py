# -*- coding: utf-8 -*-
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import Text
from models.models import User, Order, Bot, OrderStatus
from database.db import Session as DbSession
from config.settings import DEFAULT_LANGUAGE

import logging

logger = logging.getLogger(__name__)


async def process_payment_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    payment_system = callback.data.split(':')[1]
    user_id = callback.from_user.id
    language = callback.from_user.language_code or DEFAULT_LANGUAGE

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    if payment_system == 'freekassa':
        await process_freekassa_payment(callback, user_id, language)
    elif payment_system == 'paykassa':
        await process_paykassa_payment(callback, user_id, language)


async def process_freekassa_payment(callback: types.CallbackQuery, user_id: int, language: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ FreeKassa
    """
    db = DbSession()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await callback.message.answer(
                get_localized_text('error_user_not_found', language)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            get_localized_text('payment_processing', language) + "\n\n" +
            get_localized_text('payment_freekassa_redirect', language),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=get_localized_text('payment_open_link', language),
                        url="https://freekassa.ru"  # –ó–∞–≥–ª—É—à–∫–∞ URL
                    )],
                    [InlineKeyboardButton(
                        text=get_localized_text('cancel', language),
                        callback_data="payment:cancel"
                    )]
                ]
            )
        )

    except Exception as e:
        logger.error(f"Error processing FreeKassa payment: {e}")
        await callback.message.answer(get_localized_text('error_payment', language))
    finally:
        db.close()


async def process_paykassa_payment(callback: types.CallbackQuery, user_id: int, language: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ PayKassa
    """
    db = DbSession()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await callback.message.answer(
                get_localized_text('error_user_not_found', language)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            get_localized_text('payment_processing', language) + "\n\n" +
            get_localized_text('payment_paykassa_redirect', language),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=get_localized_text('payment_open_link', language),
                        url="https://paykassa.pro"  # –ó–∞–≥–ª—É—à–∫–∞ URL
                    )],
                    [InlineKeyboardButton(
                        text=get_localized_text('cancel', language),
                        callback_data="payment:cancel"
                    )]
                ]
            )
        )

    except Exception as e:
        logger.error(f"Error processing PayKassa payment: {e}")
        await callback.message.answer(get_localized_text('error_payment', language))
    finally:
        db.close()


async def process_payment_cancel(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
    """
    language = callback.from_user.language_code or DEFAULT_LANGUAGE
    await callback.answer()
    await callback.message.answer(
        get_localized_text('payment_cancelled', language),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=get_localized_text('back_to_cart', language),
                    callback_data="menu:cart"
                )]
            ]
        )
    )


def get_localized_text(key: str, lang: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å I18n middleware

    Args:
        key (str): –ö–ª—é—á —Ç–µ–∫—Å—Ç–∞
        lang (str): –ö–æ–¥ —è–∑—ã–∫–∞

    Returns:
        str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    texts = {
        'payment_processing': {
            'ru': '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...',
            'uk': '‚è≥ –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É...',
            'en': '‚è≥ Processing payment...'
        },
        'payment_freekassa_redirect': {
            'ru': '–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç FreeKassa –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.',
            'uk': '–ó–∞—Ä–∞–∑ –≤–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç FreeKassa –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.',
            'en': 'You will now be redirected to the FreeKassa website to make a payment.'
        },
        'payment_paykassa_redirect': {
            'ru': '–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç PayKassa –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.',
            'uk': '–ó–∞—Ä–∞–∑ –≤–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç PayKassa –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.',
            'en': 'You will now be redirected to the PayKassa website to make a payment.'
        },
        'payment_open_link': {
            'ru': 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã',
            'uk': 'üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏',
            'en': 'üîó Open payment link'
        },
        'payment_cancelled': {
            'ru': '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω',
            'uk': '‚ùå –ü–ª–∞—Ç—ñ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
            'en': '‚ùå Payment cancelled'
        },
        'back_to_cart': {
            'ru': 'üõç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
            'uk': 'üõç –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–æ—à–∏–∫–∞',
            'en': 'üõç Back to cart'
        },
        'error_user_not_found': {
            'ru': '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.',
            'uk': '–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.',
            'en': 'Error: user not found. Please restart the bot with the /start command.'
        },
        'error_payment': {
            'ru': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            'uk': '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.',
            'en': 'An error occurred while creating the payment. Please try again later or contact support.'
        },
        'cancel': {
            'ru': '–û—Ç–º–µ–Ω–∞',
            'uk': '–°–∫–∞—Å—É–≤–∞—Ç–∏',
            'en': 'Cancel'
        }
    }

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in ['ru', 'uk', 'en']:
        lang = 'ru'

    return texts.get(key, {}).get(lang, f"Missing text: {key}")


def register_payment_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(process_payment_callback,
                              lambda query: query.data.startswith("payment:") and query.data != "payment:cancel")
    dp.callback_query.register(process_payment_cancel,
                              lambda query: query.data == "payment:cancel")