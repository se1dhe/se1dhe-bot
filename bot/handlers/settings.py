# -*- coding: utf-8 -*-
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import Text

from config.settings import DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES
from models.user_language import UserLanguage
import logging

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = UserLanguage()


async def cmd_settings(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    language = message.from_user.language_code or DEFAULT_LANGUAGE
    await show_settings_menu(message, language)


async def show_settings_menu(message: types.Message, language: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard.add(InlineKeyboardButton(
        text=get_localized_text('settings_language', language),
        callback_data="settings:language"
    ))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.add(InlineKeyboardButton(
        text=get_localized_text('back', language) + " ‚óÄÔ∏è",
        callback_data="menu:main"
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        get_localized_text('settings_title', language) + "\n\n" +
        get_localized_text('settings_description', language),
        reply_markup=keyboard
    )


async def process_settings_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = callback.data.split(':')[1]
    language = callback.from_user.language_code or DEFAULT_LANGUAGE

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if action == 'language':
        await show_language_selection(callback, language)
    elif action in SUPPORTED_LANGUAGES:
        await set_language(callback, action)


async def show_language_selection(callback: types.CallbackQuery, language: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
    language_names = {
        'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
        'en': 'üá¨üáß English'
    }

    for lang_code in SUPPORTED_LANGUAGES:
        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        marker = "‚úÖ " if lang_code == language else ""
        keyboard.add(InlineKeyboardButton(
            text=marker + language_names.get(lang_code, lang_code),
            callback_data=f"settings:{lang_code}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.add(InlineKeyboardButton(
        text=get_localized_text('back', language) + " ‚óÄÔ∏è",
        callback_data="settings:main"
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        get_localized_text('settings_language_title', language),
        reply_markup=keyboard
    )


async def set_language(callback: types.CallbackQuery, new_language: str):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
    user_languages.set_language(user_id, new_language)

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    confirmation_text = get_localized_text('settings_language_set', new_language)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=get_localized_text('back', new_language) + " ‚óÄÔ∏è",
                    callback_data="settings:main"
                )]
            ]
        )
    )


def get_localized_text(key: str, lang: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å I18n middleware

    Args:
        key (str): –ö–ª—é—á —Ç–µ–∫—Å—Ç–∞
        lang (str): –ö–æ–¥ —è–∑—ã–∫–∞

    Returns:
        str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    texts = {
        'settings_title': {
            'ru': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'uk': '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
            'en': '‚öôÔ∏è Settings'
        },
        'settings_description': {
            'ru': '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:',
            'uk': '–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–æ—Ç–∞:',
            'en': 'Here you can configure bot settings:'
        },
        'settings_language': {
            'ru': 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
            'uk': 'üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É',
            'en': 'üåê Change language'
        },
        'settings_language_title': {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
            'uk': '–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
            'en': 'Select language:'
        },
        'settings_language_set': {
            'ru': '‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π',
            'uk': '‚úÖ –ú–æ–≤—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É',
            'en': '‚úÖ Language successfully changed to English'
        },
        'back': {
            'ru': '–ù–∞–∑–∞–¥',
            'uk': '–ù–∞–∑–∞–¥',
            'en': 'Back'
        }
    }

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in ['ru', 'uk', 'en']:
        lang = 'ru'

    return texts.get(key, {}).get(lang, f"Missing text: {key}")


def register_settings_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –ö–æ–º–∞–Ω–¥–∞ /settings
    dp.message.register(cmd_settings, Command("settings"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(process_settings_callback,
                              lambda query: query.data.startswith("settings:"))