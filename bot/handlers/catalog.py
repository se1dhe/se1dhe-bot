# -*- coding: utf-8 -*-
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.formatting import Text

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session
from models.models import Bot, BotCategory
from database.db import Session as DbSession
from typing import Dict, List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


async def cmd_catalog(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±–æ—Ç–æ–≤
    """
    await show_catalog_categories(message)


async def show_catalog_categories(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = DbSession()
    try:
        categories = db.query(BotCategory).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=2)

        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏—Ö
        if categories:
            for category in categories:
                keyboard.add(InlineKeyboardButton(
                    text=category.name,
                    callback_data=f"category:{category.id}"
                ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        keyboard.add(InlineKeyboardButton(
            text="–í—Å–µ –±–æ—Ç—ã",
            callback_data="category:all"
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="menu:main"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        language = message.from_user.language_code
        await message.answer(
            get_localized_text('catalog_title', language) + "\n\n" +
            get_localized_text('catalog_description', language),
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error showing catalog categories: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


async def process_category_selection(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = callback.data.split(':')[1]

    if category_id == 'all':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
        await show_bots_list(callback, None)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_bots_list(callback, int(category_id))


async def show_bots_list(callback: types.CallbackQuery, category_id: Optional[int]):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        category_id (Optional[int]): ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    """
    db = DbSession()
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        if category_id:
            bots = db.query(Bot).filter(Bot.category_id == category_id).all()
            category = db.query(BotCategory).filter(BotCategory.id == category_id).first()
            category_name = category.name if category else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        else:
            bots = db.query(Bot).all()
            category_name = "–í—Å–µ –±–æ—Ç—ã"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ï—Å–ª–∏ –±–æ—Ç—ã –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏—Ö
        if bots:
            for bot in bots:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                price = bot.price
                if bot.discount > 0:
                    price = bot.price * (1 - bot.discount / 100)

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                discount_info = f" (-{bot.discount}%)" if bot.discount > 0 else ""

                keyboard.add(InlineKeyboardButton(
                    text=f"{bot.name} - {price:.2f} —Ä—É–±.{discount_info}",
                    callback_data=f"bot:{bot.id}"
                ))
        else:
            # –ï—Å–ª–∏ –±–æ—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            language = callback.from_user.language_code
            await callback.message.edit_text(
                get_localized_text('catalog_title', language) + "\n\n" +
                f"{category_name}: " + get_localized_text('catalog_empty', language),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                            callback_data="menu:catalog"
                        )]
                    ]
                )
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="menu:catalog"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤
        language = callback.from_user.language_code
        await callback.message.edit_text(
            get_localized_text('catalog_title', language) + "\n\n" +
            f"{category_name}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error showing bots list: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="menu:catalog"
                    )]
                ]
            )
        )
    finally:
        db.close()


async def process_bot_selection(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ callback_data
    bot_id = int(callback.data.split(':')[1])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    await show_bot_detail(callback, bot_id)


async def show_bot_detail(callback: types.CallbackQuery, bot_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        bot_id (int): ID –±–æ—Ç–∞
    """
    db = DbSession()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot = db.query(Bot).filter(Bot.id == bot_id).first()

        if not bot:
            await callback.message.edit_text(
                "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
                            callback_data="menu:catalog"
                        )]
                    ]
                )
            )
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        price = bot.price
        final_price = price
        if bot.discount > 0:
            final_price = price * (1 - bot.discount / 100)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
        discount_text = ""
        if bot.discount > 0:
            language = callback.from_user.language_code
            discount_text = get_localized_text('bot_discount', language).format(discount=bot.discount)
            discount_text += f"\nüí≤ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {final_price:.2f} —Ä—É–±."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        keyboard.add(InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"cart:add:{bot_id}"
        ))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å—Ä–∞–∑—É
        keyboard.add(InlineKeyboardButton(
            text="üí≥ –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å",
            callback_data=f"cart:buy_now:{bot_id}"
        ))

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=f"category:{bot.category_id or 'all'}"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        language = callback.from_user.language_code
        message_text = get_localized_text('bot_info', language).format(
            name=bot.name,
            description=bot.description,
            price=price,
            discount_text=discount_text
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error showing bot detail: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
                        callback_data="menu:catalog"
                    )]
                ]
            )
        )
    finally:
        db.close()


def get_localized_text(key: str, lang: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å I18n middleware

    Args:
        key (str): –ö–ª—é—á —Ç–µ–∫—Å—Ç–∞
        lang (str): –ö–æ–¥ —è–∑—ã–∫–∞

    Returns:
        str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    texts = {
        'catalog_title': {
            'ru': 'üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ—Ç–æ–≤',
            'uk': 'üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ—Ç—ñ–≤',
            'en': 'üõí Bot Catalog'
        },
        'catalog_description': {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞:',
            'uk': '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞:',
            'en': 'Choose a category or a specific bot:'
        },
        'catalog_empty': {
            'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤.',
            'uk': '–ù–∞ –∂–∞–ª—å, –≤ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î –±–æ—Ç—ñ–≤.',
            'en': 'Unfortunately, there are no bots in this category yet.'
        },
        'bot_info': {
            'ru': 'üìå <b>{name}</b>\n\n{description}\n\nüí∞ –¶–µ–Ω–∞: {price:.2f} —Ä—É–±.\n{discount_text}',
            'uk': 'üìå <b>{name}</b>\n\n{description}\n\nüí∞ –¶—ñ–Ω–∞: {price:.2f} —Ä—É–±.\n{discount_text}',
            'en': 'üìå <b>{name}</b>\n\n{description}\n\nüí∞ Price: {price:.2f} RUB\n{discount_text}'
        },
        'bot_discount': {
            'ru': 'üî• –°–∫–∏–¥–∫–∞: {discount}%',
            'uk': 'üî• –ó–Ω–∏–∂–∫–∞: {discount}%',
            'en': 'üî• Discount: {discount}%'
        }
    }

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    if lang not in ['ru', 'uk', 'en']:
        lang = 'ru'

    return texts.get(key, {}).get(lang, f"Missing text: {key}")


def register_catalog_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –ö–æ–º–∞–Ω–¥–∞ /catalog
    dp.message.register(cmd_catalog, Command("catalog"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    dp.callback_query.register(process_category_selection,
                               lambda query: query.data.startswith("category:"))
    dp.callback_query.register(process_bot_selection,
                               lambda query: query.data.startswith("bot:"))