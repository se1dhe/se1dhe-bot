# -*- coding: utf-8 -*-
from fastapi import APIRouter, Depends, HTTPException, status, Request, Form, Body
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from pathlib import Path
from typing import List, Optional
from pydantic import BaseModel
from sqlalchemy.orm import Session

from admin.utils import serialize_model
from models.models import BugReport, BugReportMedia, User, Bot
from database.db import get_db, logger
from sqlalchemy import desc, func

router = APIRouter()

templates = Jinja2Templates(directory=Path("admin/templates"))


# Pydantic –º–æ–¥–µ–ª–∏
class BugReportResponse(BaseModel):
    id: int
    user_id: int
    bot_id: int
    text: str
    status: str
    created_at: str
    updated_at: str


@router.get("/", response_model=List[BugReportResponse])
async def get_bug_reports(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤"""
    reports = db.query(BugReport).all()
    return [serialize_model(report) for report in reports]


@router.get("/count")
async def get_reports_count(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤"""
    count = db.query(BugReport).count()
    return {"count": count}


@router.get("/latest")
async def get_latest_reports(limit: int = 5, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤"""
    reports = db.query(BugReport).order_by(desc(BugReport.created_at)).limit(limit).all()

    return [
        {
            "id": report.id,
            "user": {
                "id": report.user.id,
                "username": report.user.username,
                "first_name": report.user.first_name
            },
            "bot": {
                "id": report.bot.id,
                "name": report.bot.name
            },
            "status": report.status,
            "created_at": report.created_at.isoformat()
        }
        for report in reports
    ]


@router.get("/{report_id}", response_model=BugReportResponse)
async def get_bug_report(report_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–µ"""
    report = db.query(BugReport).filter(BugReport.id == report_id).first()
    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )
    return report


@router.get("/{report_id}/media")
async def get_bug_report_media(report_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞
    report = db.query(BugReport).filter(BugReport.id == report_id).first()
    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    media_files = db.query(BugReportMedia).filter(BugReportMedia.bug_report_id == report_id).all()

    return [
        {
            "id": media.id,
            "file_path": media.file_path,
            "file_type": media.file_type,
            "url": f"/media/{media.file_path}"
        }
        for media in media_files
    ]


@router.put("/{report_id}/status")
async def update_report_status(
        report_id: int,
        status: str = Form(...),
        db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞
    report = db.query(BugReport).filter(BugReport.id == report_id).first()
    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    if status not in ["new", "in_progress", "resolved"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid status. Must be 'new', 'in_progress', or 'resolved'"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    report.status = status
    db.commit()

    return {"message": "Bug report status updated successfully"}


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞–º–∏
@router.get("/page", response_class=templates.TemplateResponse)
async def reports_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞–º–∏"""
    return templates.TemplateResponse("reports/index.html", {"request": request})


@router.get("/page/{report_id}", response_class=templates.TemplateResponse)
async def report_detail_page(report_id: int, request: Request, db: Session = Depends(get_db)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–µ
    report = db.query(BugReport).filter(BugReport.id == report_id).first()
    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )

    return templates.TemplateResponse(
        "reports/detail.html",
        {"request": request, "report": report}
    )


# admin/routers/reports.py

@router.post("/{report_id}/reply")
async def reply_to_bug_report(
        report_id: int,
        message: str = Body(...),
        db: Session = Depends(get_db)
):
    """–û—Ç–≤–µ—Ç –Ω–∞ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞
    report = db.query(BugReport).filter(BugReport.id == report_id).first()

    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.id == report.user_id).first()

    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    bot_item = db.query(Bot).filter(Bot.id == report.bot_id).first()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_text = f"üìÆ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç</b>\n\n"

    if bot_item:
        reply_text += f"<b>–ë–æ—Ç:</b> {bot_item.name}\n"

    reply_text += f"<b>–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç #{report.id}:</b>\n"
    reply_text += f"{report.text[:100]}{'...' if len(report.text) > 100 else ''}\n\n"
    reply_text += f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
    reply_text += message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        from bot.main import bot
        await bot.send_message(
            chat_id=user.telegram_id,
            text=reply_text,
            parse_mode="HTML"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —Ä–µ—à–µ–Ω
        if report.status == "new":
            report.status = "in_progress"
            db.commit()

        return {"success": True, "message": "Reply sent successfully"}
    except Exception as e:
        logger.error(f"Error sending reply to bug report: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error sending reply: {str(e)}"
        )


@router.post("/{report_id}/resolve")
async def resolve_bug_report(
        report_id: int,
        resolution_message: str = Body(None),
        db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞
    report = db.query(BugReport).filter(BugReport.id == report_id).first()

    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bug report not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.id == report.user_id).first()

    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    bot_item = db.query(Bot).filter(Bot.id == report.bot_id).first()

    # –û—Ç–º–µ—á–∞–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π
    report.status = "resolved"
    db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if resolution_message:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        resolve_text = f"‚úÖ <b>–í–∞—à –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç —Ä–µ—à–µ–Ω</b>\n\n"

        if bot_item:
            resolve_text += f"<b>–ë–æ—Ç:</b> {bot_item.name}\n"

        resolve_text += f"<b>–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç #{report.id}:</b>\n"
        resolve_text += f"{report.text[:100]}{'...' if len(report.text) > 100 else ''}\n\n"

        if resolution_message:
            resolve_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{resolution_message}"

        try:
            from bot.main import bot
            await bot.send_message(
                chat_id=user.telegram_id,
                text=resolve_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending resolution message: {e}")
            # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

    return {"success": True, "message": "Bug report marked as resolved"}


@router.get("/stats")
async def get_bug_reports_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞–º"""
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤
    total_count = db.query(BugReport).count()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    new_count = db.query(BugReport).filter(BugReport.status == "new").count()
    in_progress_count = db.query(BugReport).filter(BugReport.status == "in_progress").count()
    resolved_count = db.query(BugReport).filter(BugReport.status == "resolved").count()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ –±–æ—Ç–∞–º
    bot_stats = db.query(
        Bot.id,
        Bot.name,
        func.count(BugReport.id).label('report_count')
    ).join(
        BugReport, Bot.id == BugReport.bot_id
    ).group_by(
        Bot.id, Bot.name
    ).order_by(
        desc('report_count')
    ).limit(5).all()

    top_bots = [
        {
            "id": bot_id,
            "name": bot_name,
            "report_count": count
        }
        for bot_id, bot_name, count in bot_stats
    ]

    return {
        "total_count": total_count,
        "by_status": {
            "new": new_count,
            "in_progress": in_progress_count,
            "resolved": resolved_count
        },
        "top_bots": top_bots
    }