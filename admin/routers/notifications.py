# admin/routers/notifications.py

from fastapi import APIRouter, Depends, HTTPException, status, Request, Form, Body
from fastapi.templating import Jinja2Templates
from pathlib import Path
from typing import List, Optional, Dict
from sqlalchemy.orm import Session
from models.models import User, Order, OrderStatus, Bot, Changelog
from database.db import get_db
from bot.main import bot

router = APIRouter()

templates = Jinja2Templates(directory=Path("admin/templates"))


@router.post("/send")
async def send_notification(
        user_ids: List[int] = Body(...),
        message: str = Body(...),
        db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not user_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No users selected"
        )

    if not message:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Message cannot be empty"
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    users = db.query(User).filter(User.id.in_(user_ids)).all()

    if not users:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No users found with the provided IDs"
        )

    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    sent_count = 0
    failed_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1

    return {
        "success": True,
        "sent_count": sent_count,
        "failed_count": failed_count,
        "total_users": len(users)
    }


@router.post("/broadcast")
async def broadcast_notification(
        message: str = Body(...),
        filter_active: bool = Body(False),
        db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not message:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Message cannot be empty"
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    query = db.query(User)

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
    if filter_active:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
        pass

    users = query.all()

    if not users:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No users found"
        )

    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    sent_count = 0
    failed_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1

    return {
        "success": True,
        "sent_count": sent_count,
        "failed_count": failed_count,
        "total_users": len(users)
    }


# admin/routers/notifications.py (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)

@router.post("/send_changelog")
async def send_changelog_notification(
        changelog_id: int = Body(...),
        db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —á–µ–Ω–∂–ª–æ–≥ –∏–∑ –ë–î
    changelog = db.query(Changelog).filter(Changelog.id == changelog_id).first()

    if not changelog:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Changelog not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –ë–î
    bot_item = db.query(Bot).filter(Bot.id == changelog.bot_id).first()

    if not bot_item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Bot not found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    users_query = db.query(User).join(Order).filter(
        Order.bot_id == bot_item.id,
        Order.status == OrderStatus.PAID
    ).distinct()

    users = users_query.all()

    if not users:
        return {
            "success": True,
            "message": "No users found who purchased this bot",
            "sent_count": 0,
            "total_users": 0
        }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"üÜï <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ {bot_item.name}</b>\n\n"
    message += f"<b>–í–µ—Ä—Å–∏—è {changelog.version}</b>\n\n"
    message += changelog.description

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if bot_item.readme_url:
        message += f"\n\n<a href='{bot_item.readme_url}'>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>"

    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    sent_count = 0
    failed_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if sent_count > 0:
        changelog.is_notified = True
        db.commit()

    return {
        "success": True,
        "sent_count": sent_count,
        "failed_count": failed_count,
        "total_users": len(users)
    }

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ admin/main.py
# –í —Å–µ–∫—Ü–∏–∏ –≥–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ API —Ä–æ—É—Ç–µ—Ä—ã
# from admin.routers import notifications
# app.include_router(notifications.router, prefix="/notifications", tags=["notifications"], dependencies=[Depends(verify_token)])